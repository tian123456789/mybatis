package com.tgr.springbootmybatis.algorithms;

/**
 * @author tgr
 *	二叉树
 *	既能像有序数组那样快速的查找数据，又能像链表那样快速的插入数据
 *	如果树的每个节点最多有两个子节点，则称为二叉树。如果节点的子节点可以多余两个，称为多路树
 *	
 *	二叉搜索树。
 *		一个节点的左子节点的关键字值小于这个节点，右子节点的关键字值大于或等于这个父节点
 *	平衡树与非平衡树的概念。非平衡就是说树的大部分节点在根的一边
 */
public class A5erchashu {

	class Node {
	      int age;
	      String name;
	      Node leftChild;  //左子节点的引用
	      Node rightChild; //右子节点的引用
	     
	      public Node(int age,String name){
	             this.age = age;
	             this.name = name;
	      }
	     
	      //打印该节点的信息
	      public void displayNode(){
	             System.out.println("name:"+name+",age:"+age);
	      }
	}
	
	//查找
	//	查找某个节点时，先从根节点入手，如果该元素值小于根节点，则转向左子节点，否则转向右子节点，
	//	以此类推，直到找到该节点，或者到最后一个叶子节点依然没有找到，则证明树中没有该节点
	
	
	
	//插入
	//	插入一个新节点首先要确定插入的位置，这个过程类似于查找一个不存在的节点
	//	找到要插入的位置之后，将父节点的左子节点或者右子节点指向新节点即可
	
	//遍历
	//前序遍历、中序遍历(最常用 左子》父》右子)、后序遍历
	//中序遍历
	//遍历树最简单的方法是递归。用该方法时，只需要做三件事（初始化时这个节点是根）：
	//1、调用自身来遍历节点的左子树
	//2、访问这个节点
	//3、调用自身来遍历节点的右子树
	//遍历可以应用于任何二叉树，而不只是二叉搜索树。遍历的节点并不关心节点的关键字值，它只看这个节点是否有子节点
	
	
}
