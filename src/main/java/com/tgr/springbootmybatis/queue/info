https://www.cnblogs.com/lemon-flm/p/7877898.html

interface Queue<E> extends Collection<E>
	boolean add(E e); 如果可能，将指定元素插入此队列 在不违反容量限制的情况下 空间不可用返回true
	boolean offer(E e);如果可能，将指定的元素插入此队列因此，在不违反容量限制的情况下。
					     当使用容量受限队列时，此方法通常是优于{@link add}，后者只能插入元素

	E remove(); 检索并删除此队列的头 队列为空引发异常
	E poll();    检索并删除此队列的头， 空返回空
	E element(); 检索但不删除此队列的头。空 异常
	E peek();    检索但不删除此队列的头，空 空

PriorityQueue<E> extends AbstractQueue<E>   类实质上维护了一个有序列表。加入到 Queue 中的元素根据它们的天然排序（通过其 java.util.Comparable 实现）或者根据传递给构造函数的 java.util.Comparator 实现来定位。
ConcurrentLinkedQueue<E> extends AbstractQueue<E> implements Queue<E>, 是基于链接节点的、线程安全的队列

BlockingQueue 接口和五个阻塞队列类。它实质上就是一种带有一点扭曲的 FIFO 数据结构。
			   不是立即从队列中添加或者删除元素，线程执行操作阻塞，直到有空间或者元素可用。
			   
　* ArrayBlockingQueue ：	一个由数组支持的有界队列。可以选择是否需要公平性，如果公平参数被设置true，等待时间最长的线程会优先得到处
　* LinkedBlockingQueue ：	一个由链接节点支持的可选有界队列。
　* PriorityBlockingQueue ：	一个由优先级堆支持的无界优先级队列。 是一个带优先级的 队列，而不是先进先出队列
　* DelayQueue ：			一个由优先级堆支持的、基于时间的调度队列。是一个存放Delayed 元素的无界阻塞队列，只有在延迟期满时才能从中提取元素。
									该队列的头部是延迟期满后保存时间最长的 Delayed 元素
　* SynchronousQueue ：		一个利用 BlockingQueue 接口的简单聚集
		阻塞队列多出的方法
				put         添加一个元素                      如果队列满，则阻塞
　　				take        移除并返回队列头部的元素     如果队列为空，则阻塞


